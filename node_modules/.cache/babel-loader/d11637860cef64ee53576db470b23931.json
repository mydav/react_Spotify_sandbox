{"ast":null,"code":"var _jsxFileName = \"/Users/vadymbardukov/Dropbox/projects/Strive/strive/first_react/new_netflix/src/components/Song.jsx\";\nimport React from 'react';\nimport '../../main-page.css';\nimport { Row, Col, Card, Button, CardImg, CardSubtitle, CardTitle, CardBody } from 'reactstrap';\nimport Track from './Track';\nimport { GuardSpinner } from \"react-spinners-kit\";\n\nclass Song extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      albumInfo: '',\n      loading: true\n    };\n\n    this.componentDidMount = async () => {\n      setTimeout(async () => {\n        await this.fetchAlbum();\n      }, 500);\n    };\n\n    this.fetchAlbum = async () => {\n      this.setState({\n        loading: true\n      });\n\n      try {\n        let response = await fetch(\"https://deezerdevs-deezer.p.rapidapi.com/album/\" + this.props.match.params.songId, {\n          headers: {\n            \"x-rapidapi-host\": \"deezerdevs-deezer.p.rapidapi.com\",\n            \"x-rapidapi-key\": \"0a7c4f4526msh6902f1bae09781cp153e87jsn282580f5babf\"\n          },\n          method: \"GET\"\n        });\n        let infoAlbum = await response.json();\n        let date = infoAlbum.release_date.split(\"-\");\n        console.log(\"infoAlbum\", infoAlbum.tracks.data.length);\n        this.setState({\n          cover: infoAlbum.cover_medium,\n          title: infoAlbum.title,\n          date: date[0],\n          songs: infoAlbum.tracks.data.length,\n          artist: infoAlbum.artist.name,\n          albumInfo: infoAlbum.tracks,\n          loading: false\n        });\n      } catch (error) {\n        console.log('Error', error);\n      }\n\n      ;\n    };\n  }\n\n  render() {\n    console.log(\"state\", this.state.albumInfo);\n    return React.createElement(\"div\", {\n      className: \"song-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, this.state.loading ? React.createElement(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"40%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(GuardSpinner, {\n      className: \"spinner-spotify\",\n      size: 60,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    })) : React.createElement(Row, {\n      className: \"page-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(Col, {\n      className: \"col-3 page-col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"my-3 card-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(CardImg, {\n      top: true,\n      src: this.state.cover,\n      alt: \"Card image cap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }), React.createElement(CardBody, {\n      className: \"card-body-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(CardTitle, {\n      className: \"song-title-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, this.state.title, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    })), React.createElement(CardTitle, {\n      className: \"song-artist-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, this.state.artist, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    })), React.createElement(Button, {\n      className: \"song-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Play\"), React.createElement(CardSubtitle, {\n      className: \"date-and-number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, this.state.date, \" : \", this.state.songs, \" songs\")))), React.createElement(Col, {\n      md: \"9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"track-col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, this.state.albumInfo && this.state.albumInfo.data.map((el, index) => React.createElement(Track, {\n      trackInfo: el,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default Song;","map":{"version":3,"sources":["/Users/vadymbardukov/Dropbox/projects/Strive/strive/first_react/new_netflix/src/components/Song.jsx"],"names":["React","Row","Col","Card","Button","CardImg","CardSubtitle","CardTitle","CardBody","Track","GuardSpinner","Song","Component","state","albumInfo","loading","componentDidMount","setTimeout","fetchAlbum","setState","response","fetch","props","match","params","songId","headers","method","infoAlbum","json","date","release_date","split","console","log","tracks","data","length","cover","cover_medium","title","songs","artist","name","error","render","position","top","left","transform","map","el","index"],"mappings":"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","sourcesContent":["import React from 'react'\nimport '../../main-page.css'\nimport {Row,Col,Card,Button, CardImg, CardSubtitle, CardTitle, CardBody} from 'reactstrap'\nimport Track from './Track'\nimport { GuardSpinner } from \"react-spinners-kit\";\n\nclass Song extends React.Component{\n    state = {\n        albumInfo: '',\n        loading: true,\n    }\n    render() {\n        console.log(\"state\",this.state.albumInfo)\n\n        return (\n            <div className=\"song-container\">\n                    {this.state.loading ? <div style = {{position: \"fixed\", top: \"40%\", left: \"50%\", transform: \"translate(-50%, -50%)\"}}><GuardSpinner  className=\"spinner-spotify\" size={60} /></div> :                     <Row className=\"page-row\">\n                    <Col className=\"col-3 page-col\">\n                    <Card className=\"my-3 card-page\">\n                        <CardImg top src={this.state.cover} alt=\"Card image cap\" />\n                        <CardBody className=\"card-body-page\">\n                            <CardTitle className=\"song-title-page\">{this.state.title}<br/></CardTitle>\n                            <CardTitle className=\"song-artist-page\">{this.state.artist}<br/></CardTitle>\n                            <Button className=\"song-btn\">Play</Button>\n                            <CardSubtitle className=\"date-and-number\">{this.state.date} : {this.state.songs} songs</CardSubtitle>\n                        </CardBody>\n                    </Card>\n                    </Col>\n                    <Col md=\"9\">\n                        <Row className=\"track-col\">\n                        {this.state.albumInfo && this.state.albumInfo.data\n                            .map((el,index)=> <Track trackInfo={el} key={index} />)}\n                        </Row>\n                    </Col>\n                </Row>}\n            </div>\n        )\n    }\n    componentDidMount = async() => {\n        setTimeout(async() => {\n            await this.fetchAlbum()\n        }, 500);\n    }\n    fetchAlbum = async() => {\n        this.setState({\n            loading: true\n        })\n        try{\n            let response = await fetch(\"https://deezerdevs-deezer.p.rapidapi.com/album/\" + this.props.match.params.songId,{\n                headers: {\n                    \"x-rapidapi-host\": \"deezerdevs-deezer.p.rapidapi.com\",\n                    \"x-rapidapi-key\": \"0a7c4f4526msh6902f1bae09781cp153e87jsn282580f5babf\"\n                },\n                method: \"GET\"\n            })\n            let infoAlbum = await response.json()\n            let date = infoAlbum.release_date.split(\"-\")\n            console.log(\"infoAlbum\",infoAlbum.tracks.data.length)\n            this.setState({\n                cover: infoAlbum.cover_medium,\n                title: infoAlbum.title,\n                date: date[0],\n                songs: infoAlbum.tracks.data.length,\n                artist: infoAlbum.artist.name,\n                albumInfo: infoAlbum.tracks,\n                loading: false\n            })\n\n        }catch(error){\n            console.log('Error', error);\n        };\n    }\n}\n\nexport default Song"]},"metadata":{},"sourceType":"module"}